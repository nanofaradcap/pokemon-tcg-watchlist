generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())

  // Relations
  userCards UserCard[]

  @@map("profiles")
}

model Card {
  id          String   @id @default(cuid())
  name        String
  setDisplay   String?
  jpNo         String?
  rarity       String?
  imageUrl     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  sources  CardSource[]
  userCards UserCard[]

  // Indexes
  @@index([name])
  @@index([jpNo])
  @@index([name, jpNo])
  @@map("cards")
}

model CardSource {
  id             String    @id @default(cuid())
  cardId         String
  sourceType     String    // 'tcgplayer' or 'pricecharting'
  url            String
  productId      String?
  currency       String    @default("USD")
  lastCheckedAt  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  card   Card         @relation(fields: [cardId], references: [id], onDelete: Cascade)
  prices CardPrice[]

  // Constraints
  @@unique([cardId, sourceType])
  @@index([cardId])
  @@index([sourceType])
  @@map("card_sources")
}

model CardPrice {
  id        String   @id @default(cuid())
  sourceId  String
  priceType String   // 'market', 'ungraded', 'grade7', 'grade8', 'grade9', 'grade95', 'grade10'
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  source CardSource @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([sourceId, priceType])
  @@index([sourceId])
  @@index([priceType])
  @@map("card_prices")
}

model PriceHistory {
  id        String    @id @default(cuid())
  sourceId  String
  priceType String
  oldPrice  Decimal?  @db.Decimal(10, 2)
  newPrice  Decimal?  @db.Decimal(10, 2)
  changedAt DateTime  @default(now())

  // Relations
  source CardSource @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([sourceId])
  @@index([changedAt])
  @@map("price_history")
}

model UserCard {
  id       String @id @default(cuid())
  userId   String
  cardId   String
  createdAt DateTime @default(now())

  // Relations
  user Profile @relation(fields: [userId], references: [id], onDelete: Cascade)
  card Card    @relation(fields: [cardId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([userId, cardId])
  @@index([userId])
  @@index([cardId])
  @@map("user_cards")
}
